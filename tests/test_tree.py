import unittest
from avl.tree import Tree


class TestTree(unittest.TestCase):
    def setUp(self) -> None:
        self.t = Tree()

    def tearDown(self) -> None:
        del self.t

    def test_insert(self) -> None:
        self.assertIsNone(self.t.root)
        self.t.insert(8)
        self.assertIsNotNone(self.t.root)
        self.t.insert(6)
        self.assertIsNotNone(self.t.root.lchild)
        self.assertEqual(self.t.root.lchild.key, 6)
        self.t.insert(9)
        self.assertIsNotNone(self.t.root.rchild)
        self.assertEqual(self.t.root.rchild.key, 9)

    def test_find(self) -> None:
        self.t.insert(8)
        self.assertTrue(self.t.find(8))
        self.t.insert(6)
        self.assertTrue(self.t.find(6))
        self.assertFalse(self.t.find(9))
        self.t.insert(9)
        self.assertTrue(self.t.find(9))

    def test_preorder(self) -> None:
        correct_order = [8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 15]
        self.t.insert(8)
        self.t.insert(4)
        self.t.insert(12)
        self.t.insert(2)
        self.t.insert(6)
        self.t.insert(10)
        self.t.insert(14)
        self.t.insert(1)
        self.t.insert(3)
        self.t.insert(5)
        self.t.insert(7)
        self.t.insert(9)
        self.t.insert(11)
        self.t.insert(13)
        self.t.insert(15)
        self.assertEqual(self.t.traverse('preorder'), correct_order)

    def test_inorder(self) -> None:
        self.t.insert(9)
        self.t.insert(7)
        self.t.insert(8)
        self.t.insert(6)
        self.t.insert(5)
        self.t.insert(1)
        self.t.insert(3)
        self.t.insert(2)
        self.t.insert(4)
        self.t.insert(10)
        self.t.insert(16)
        self.t.insert(15)
        self.t.insert(14)
        self.t.insert(13)
        self.t.insert(12)
        self.t.insert(11)
        self.assertEqual(self.t.traverse('inorder'), list(range(1,17)))

    def test_postorder(self) -> None:
        correct_order = [1, 3, 2, 5, 7, 6, 4, 9, 11, 10, 13, 15, 14, 12, 8]
        self.t.insert(8)
        self.t.insert(4)
        self.t.insert(12)
        self.t.insert(2)
        self.t.insert(6)
        self.t.insert(10)
        self.t.insert(14)
        self.t.insert(1)
        self.t.insert(3)
        self.t.insert(5)
        self.t.insert(7)
        self.t.insert(9)
        self.t.insert(11)
        self.t.insert(13)
        self.t.insert(15)
        self.assertEqual(self.t.traverse('postorder'), correct_order)

    def test_get_successor(self) -> None:
        self.t.insert(8)
        self.t.insert(4)
        self.t.insert(12)
        self.t.insert(2)
        self.t.insert(6)
        self.t.insert(10)
        self.t.insert(14)
        self.t.insert(1)
        self.t.insert(3)
        self.t.insert(5)
        self.t.insert(7)
        self.t.insert(9)
        self.t.insert(11)
        self.t.insert(13)
        self.t.insert(15)
        self.assertIsNotNone(self.t._get_successor(self.t.root))
        self.assertEqual(self.t._get_successor(self.t.root).key, 9)
        self.assertIsNotNone(self.t._get_successor(self.t.root.rchild))
        self.assertEqual(self.t._get_successor(self.t.root.rchild).key, 13)

    def test_delete(self) -> None:
        self.t.insert(8)
        self.t.insert(4)
        self.t.insert(12)
        self.t.insert(2)
        self.t.insert(6)
        self.t.insert(10)
        self.t.insert(14)
        self.t.insert(1)
        self.t.insert(3)
        self.t.insert(5)
        self.t.insert(7)
        self.t.insert(9)
        self.t.insert(11)
        self.t.insert(13)
        self.t.insert(15)
        self.assertTrue(self.t.delete(1))
        self.assertFalse(self.t.find(1))
        self.assertTrue(self.t.find(2))
        self.assertIsNone(self.t.root.lchild.lchild.lchild)
        self.assertIsNotNone(self.t.root.lchild.lchild.rchild)
        self.assertEqual(self.t.traverse('inorder'), list(range(2,16)))
        self.assertTrue(self.t.delete(2))
        self.assertFalse(self.t.find(2))
        self.assertTrue(self.t.find(3))
        self.assertIsNone(self.t.root.lchild.lchild.lchild)
        self.assertIsNone(self.t.root.lchild.lchild.rchild)
        self.assertIsNotNone(self.t.root.lchild.lchild)
        self.assertEqual(self.t.root.lchild.lchild.key, 3)
        self.assertIsNotNone(self.t.root.lchild.lchild.parent)
        self.assertEqual(self.t.root.lchild.lchild.parent.key, 4)
        self.assertEqual(self.t.traverse('inorder'), list(range(3,16)))
        self.assertTrue(self.t.delete(8))
        self.assertFalse(self.t.find(8))
        self.assertTrue(self.t.find(9))
        self.assertEqual(self.t.root.key, 9)
        self.assertIsNone(self.t.root.rchild.lchild.lchild)

    def test_height_balanced(self) -> None:
        self.t.insert(8)
        self.t.insert(4)
        self.t.insert(12)
        self.t.insert(2)
        self.t.insert(6)
        self.t.insert(10)
        self.t.insert(14)
        self.t.insert(1)
        self.t.insert(3)
        self.t.insert(5)
        self.t.insert(7)
        self.t.insert(9)
        self.t.insert(11)
        self.t.insert(13)
        self.t.insert(15)
        self.assertEqual(self.t.height, 4)

    def test_height_unbalanced(self) -> None:
        self.t.insert(9)
        self.t.insert(7)
        self.t.insert(8)
        self.t.insert(6)
        self.t.insert(5)
        self.t.insert(1)
        self.t.insert(3)
        self.t.insert(2)
        self.t.insert(4)
        self.t.insert(10)
        self.t.insert(16)
        self.t.insert(15)
        self.t.insert(14)
        self.t.insert(13)
        self.t.insert(12)
        self.t.insert(11)
        self.assertEqual(self.t.height, 8)

    def test_balance_factor_balanced(self) -> None:
        self.t.insert(8)
        self.t.insert(4)
        self.t.insert(12)
        self.t.insert(2)
        self.t.insert(6)
        self.t.insert(10)
        self.t.insert(14)
        self.t.insert(1)
        self.t.insert(3)
        self.t.insert(5)
        self.t.insert(7)
        self.t.insert(9)
        self.t.insert(11)
        self.t.insert(13)
        self.t.insert(15)
        self.assertEqual(self.t.balance_factor, 0)

    def test_balance_factor_unbalanced(self) -> None:
        self.t.insert(9)
        self.t.insert(7)
        self.t.insert(8)
        self.t.insert(6)
        self.t.insert(5)
        self.t.insert(1)
        self.t.insert(3)
        self.t.insert(2)
        self.t.insert(4)
        self.t.insert(10)
        self.t.insert(16)
        self.t.insert(15)
        self.t.insert(14)
        self.t.insert(13)
        self.t.insert(12)
        self.t.insert(11)
        self.assertEqual(self.t.balance_factor, -1)
        self.assertEqual(self.t._recursive_balance_factor(self.t.root.lchild), 4)

    def test_pre_rotate_left(self) -> None:
        self.t.insert(2)
        self.t.insert(1)
        self.t.insert(6)
        self.t.insert(4)
        self.t.insert(7)
        self.t.insert(3)
        self.t.insert(5)
        self.t._pre_rotate_left(self.t.root)
        self.assertEqual(self.t.root.key, 2)
        self.assertEqual(self.t.root.lchild.key, 1)
        self.assertIsNone(self.t.root.lchild.lchild)
        self.assertIsNone(self.t.root.lchild.rchild)
        self.assertEqual(self.t.root.rchild.key, 4)
        self.assertEqual(self.t.root.rchild.lchild.key, 3)
        self.assertEqual(self.t.root.rchild.rchild.key, 6)
        self.assertEqual(self.t.root.rchild.rchild.lchild.key, 5)
        self.assertEqual(self.t.root.rchild.rchild.rchild.key, 7)

    def test_rotate_left(self) -> None:
        self.t.insert(2)
        self.t.insert(1)
        self.t.insert(4)
        self.t.insert(3)
        self.t.insert(6)
        self.t.insert(5)
        self.t.insert(7)
        self.t._rotate_left(self.t.root)
        self.assertEqual(self.t.root.key, 4)
        self.assertEqual(self.t.root.lchild.key, 2)
        self.assertEqual(self.t.root.lchild.lchild.key, 1)
        self.assertEqual(self.t.root.lchild.rchild.key, 3)
        self.assertEqual(self.t.root.rchild.key, 6)
        self.assertEqual(self.t.root.rchild.lchild.key, 5)
        self.assertEqual(self.t.root.rchild.rchild.key, 7)
        self.t = Tree()
        self.t.insert(42)
        self.t.insert(15)
        self.t.insert(88)
        self.t.insert(6)
        self.t.insert(27)
        self.t.insert(89)
        self.t.insert(90)
        self.t._rotate_left(self.t.root.rchild)
        self.assertEqual(self.t.root.key, 42)
        self.assertEqual(self.t.root.rchild.key, 89)
        self.assertEqual(self.t.root.rchild.lchild.key, 88)
        self.assertEqual(self.t.root.rchild.rchild.key, 90)
        self.assertIsNone(self.t.root.rchild.lchild.lchild)
        self.assertIsNone(self.t.root.rchild.lchild.rchild)
        self.assertIsNone(self.t.root.rchild.rchild.lchild)
        self.assertIsNone(self.t.root.rchild.rchild.rchild)
        self.assertEqual(self.t.root.lchild.key, 15)
        self.assertEqual(self.t.root.lchild.lchild.key, 6)
        self.assertEqual(self.t.root.lchild.rchild.key, 27)

    def test_pre_rotate_right(self) -> None:
        self.t.insert(6)
        self.t.insert(2)
        self.t.insert(7)
        self.t.insert(1)
        self.t.insert(4)
        self.t.insert(3)
        self.t.insert(5)
        self.t._pre_rotate_right(self.t.root)
        self.assertEqual(self.t.root.key, 6)
        self.assertEqual(self.t.root.lchild.key, 4)
        self.assertEqual(self.t.root.rchild.key, 7)
        self.assertEqual(self.t.root.lchild.lchild.key, 2)
        self.assertEqual(self.t.root.lchild.rchild.key, 5)
        self.assertEqual(self.t.root.lchild.lchild.lchild.key, 1)
        self.assertEqual(self.t.root.lchild.lchild.rchild.key, 3)

    def test_rotate_right(self) -> None:
        self.t.insert(42)
        self.t.insert(15)
        self.t.insert(88)
        self.t.insert(6)
        self.t.insert(27)
        self.t.insert(4)
        self.assertEqual(self.t.root.key, 42)
        self.t._rotate_right(self.t.root)
        self.assertEqual(self.t.root.key, 15)
        self.assertEqual(self.t.root.lchild.key, 6)
        self.assertEqual(self.t.root.lchild.lchild.key, 4)
        self.assertEqual(self.t.root.rchild.key, 42)
        self.assertEqual(self.t.root.rchild.lchild.key, 27)
        self.assertEqual(self.t.root.rchild.rchild.key, 88)
        self.t = Tree()
        self.t.insert(9)
        self.t.insert(7)
        self.t.insert(6)
        self.t.insert(8)
        self.assertEqual(self.t.root.key, 9)
        self.t._rotate_right(self.t.root)
        self.assertEqual(self.t.root.key, 7)
        self.assertEqual(self.t.root.lchild.key, 6)
        self.assertIsNone(self.t.root.lchild.lchild)
        self.assertIsNone(self.t.root.lchild.rchild)
        self.assertEqual(self.t.root.rchild.key, 9)
        self.assertIsNone(self.t.root.rchild.rchild)
        self.assertEqual(self.t.root.rchild.lchild.key, 8)
        self.assertIsNone(self.t.root.rchild.lchild.lchild)
        self.assertIsNone(self.t.root.rchild.lchild.rchild)
        self.t = Tree()
        self.t.insert(42)
        self.t.insert(15)
        self.t.insert(88)
        self.t.insert(6)
        self.t.insert(27)
        self.t.insert(87)
        self.t.insert(86)
        self.t._rotate_right(self.t.root.rchild)
        self.assertEqual(self.t.root.key, 42)
        self.assertEqual(self.t.root.rchild.key, 87)
        self.assertEqual(self.t.root.rchild.lchild.key, 86)
        self.assertEqual(self.t.root.rchild.rchild.key, 88)
        self.assertIsNone(self.t.root.rchild.lchild.lchild)
        self.assertIsNone(self.t.root.rchild.lchild.rchild)
        self.assertIsNone(self.t.root.rchild.rchild.lchild)
        self.assertIsNone(self.t.root.rchild.rchild.rchild)


if __name__ == '__main__':
    unittest.main()
